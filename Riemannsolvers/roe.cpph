/*
This is a function that calculates Roe's fluxes, following the algorithm on P.357, Toro, 2009. 
Generated 21.11.2020
*/

template <bool useNCP, bool useFlux, bool useViscousFlux, int numQuadPoints, typename SolverType>
double kernels::finitevolumes::riemannsolvers::c::roe(
    SolverType&         solver,
    double* const       fnL,
    double* const       fnR,
    const double* const qL,
    const double* const qR,
    const int           direction) {

  constexpr int numberOfVariables  = SolverType::NumberOfVariables;
  constexpr int numberOfParameters = SolverType::NumberOfParameters;
  
  double GAMMA = 1.4;
  double s_max = -1.0;
  
  // 1. compute Roe average
  double Roe_average[5];
  double irhoL = 1 / qL[0]; 
  double irhoR = 1 / qR[0];
  double rootrhoL = std::sqrt(qL[0]);
  double rootrhoR = std::sqrt(qR[0]);
  
  double pL = (GAMMA-1)*(qL[4]-0.5*irhoL*(qL[1]*qL[1]+qL[2]*qL[2]));
  double pR = (GAMMA-1)*(qR[4]-0.5*irhoR*(qR[1]*qR[1]+qR[2]*qR[2]));

  double HL = (qL[4]+pL)/qL[0];
  double HR = (qR[4]+pR)/qR[0];
  
  Roe_average[0] = (rootrhoL*irhoL*qL[1] + rootrhoR*irhoR*qR[1]) / (rootrhoL + rootrhoR); // u_hat
  Roe_average[1] = (rootrhoL*irhoL*qL[2] + rootrhoR*irhoR*qR[2]) / (rootrhoL + rootrhoR); // v_hat
  Roe_average[2] = (rootrhoL*irhoL*qL[3] + rootrhoR*irhoR*qR[3]) / (rootrhoL + rootrhoR); // w_hat
  Roe_average[3] = (rootrhoL*HL + rootrhoR*HR) / (rootrhoL + rootrhoR); // H_hat
  Roe_average[4] = std::sqrt((GAMMA-1) * (Roe_average[3]-0.5*(Roe_average[0]*Roe_average[0]+Roe_average[1]*Roe_average[1]+Roe_average[2]*Roe_average[2]))); // a_hat
  
  if (direction == 0) {
  // 2. compute averaged eingevalues
  double lambda_hat[5];
  lambda_hat[0] = Roe_average[0] - Roe_average[4];
  lambda_hat[1] = Roe_average[0];
  lambda_hat[2] = Roe_average[0];
  lambda_hat[3] = Roe_average[0];
  lambda_hat[4] = Roe_average[0] + Roe_average[4];
  
  for (int i = 0; i < 5; i++) {
      if (s_max < std::abs(lambda_hat[i])) {
          s_max = std::abs(lambda_hat[i]);
      }
  }
  
  
  // 3. computer averaged eigenvectors
  double K_hat[5][5];
  K_hat[0][0] = 1;
  K_hat[0][1] = Roe_average[0]-Roe_average[4];
  K_hat[0][2] = Roe_average[1];
  K_hat[0][3] = Roe_average[2];
  K_hat[0][4] = Roe_average[3]-Roe_average[0]*Roe_average[4];
  
  K_hat[1][0] = 1;
  K_hat[1][1] = Roe_average[0];
  K_hat[1][2] = Roe_average[1];
  K_hat[1][3] = Roe_average[2];
  K_hat[1][4] = 0.5*(Roe_average[0]*Roe_average[0]+Roe_average[1]*Roe_average[1]+Roe_average[2]*Roe_average[2]);
  
  K_hat[2][0] = 0;
  K_hat[2][1] = 0;
  K_hat[2][2] = 1;
  K_hat[2][3] = 0;
  K_hat[2][4] = Roe_average[1];
  
  K_hat[3][0] = 0;
  K_hat[3][1] = 0;
  K_hat[3][2] = 0;
  K_hat[3][3] = 1;
  K_hat[3][4] = Roe_average[2];
  
  K_hat[4][0] = 1;
  K_hat[4][1] = Roe_average[0]+Roe_average[4];
  K_hat[4][2] = Roe_average[1];
  K_hat[4][3] = Roe_average[2];
  K_hat[4][4] = Roe_average[3]+Roe_average[0]*Roe_average[4];
  
  // 4. computer wave strengths
  double alpha[5];
  double delta_q[5];
  for (int i = 0; i < 5; i++){
      delta_q[i] = qR[i] - qL[i];
  }
  
  alpha[2] = delta_q[2] - Roe_average[1]*delta_q[0];
  alpha[3] = delta_q[3] - Roe_average[2]*delta_q[0];
  
  delta_q[4] = delta_q[4] - alpha[2]*Roe_average[1] - alpha[3]*Roe_average[2];
  
  alpha[1] = (GAMMA-1)/(Roe_average[4]*Roe_average[4]) * (delta_q[0]*(Roe_average[3]-Roe_average[0]*Roe_average[0])+Roe_average[0]*delta_q[1]-delta_q[4]);
  alpha[0] = 1/(2*Roe_average[4])*(delta_q[0]*(Roe_average[0]+Roe_average[4])-delta_q[1]-Roe_average[4]*alpha[1]);
  alpha[4] = delta_q[0] - (alpha[0] + alpha[1]);
  
  // 5. computer Roe's flux
  double FL2[2][5] = {0.0};
  double* FL[2] = {FL2[0], FL2[1]};
  solver.flux(qL, FL);
  
  for (int i = 0; i < 5; i++) {
      fnL[i] = FL[direction][i];
  }
  for (int i = 0; i < 5; i++) {
      if (lambda_hat[i] <= 0) {
          for (int j = 0; j < 5; j++) {
              fnL[j] += alpha[i]*lambda_hat[i]*K_hat[i][j];
          }
      }
  }
  for (int i = 0; i < 5; i++) {
      fnR[i] = fnL[i];
  }
  return s_max;
  }
  
  else {
  // 1. calcualte fluxes normally
  double FL2[2][5] = {0.0};
  double FR2[2][5] = {0.0};
  double* FL[2] = {FL2[0], FL2[1]};
  double* FR[2] = {FR2[0], FR2[1]};
  solver.flux(qL, FL);
  solver.flux(qR, FR);
  for (int i = 0; i < 5; i++) {
      fnL[i] = FL[direction][i];
      fnR[i] = FR[direction][i];
  }
  
  double p = (GAMMA-1)*(qL[4]-0.5*1/qL[0]*(qL[1]*qL[1]+qL[2]*qL[2]+qL[3]*qL[3]));
  double a = std::sqrt(GAMMA*p/qL[0]);
  s_max = std::abs(qL[2]/qL[0]-a);
  if (s_max < std::abs(qL[2]/qL[0])){
  s_max = std::abs(qL[2]/qL[0]);
  }
  if (s_max < std::abs(qL[2]/qL[0]+a)){
  s_max = std::abs(qL[2]/qL[0]+a);
  }
  
  //return s_max;
  return 0;
  } 
}
